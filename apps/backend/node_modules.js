const fs = require('fs');
const path = require('path');

// Function to extract dependencies (from previous script)
function extractDependencies(filePath) {
  const code = fs.readFileSync(filePath, 'utf8');
  const dependencies = [];

  // Regular expression to match require statements
  const requireRegex = /require\(['"`]([^'"`]+)['"`]\)/g;
  let match;
  while ((match = requireRegex.exec(code)) !== null) {
    dependencies.push(match[1]);
  }

  // Regular expression to match import statements
  const importRegex = /import\s+(?:.*\s+from\s+)?['"`]([^'"`]+)['"`]/g;
  while ((match = importRegex.exec(code)) !== null) {
    dependencies.push(match[1]);
  }

  return dependencies;
}

// Function to create package.json
function createPackageJson(dependencies, originalPackageJsonPath, filePath) {
  const dirPath = path.dirname(filePath);
  const packageJsonPath = path.join(dirPath, 'package.json');

  // Read the original package.json
  const originalPackageJson = JSON.parse(fs.readFileSync(originalPackageJsonPath, 'utf8'));
  const originalDependencies = originalPackageJson.dependencies || {};

  const packageJsonContent = {
    name: path.basename(dirPath),
    version: '1.0.0',
    dependencies: {},
  };

  dependencies.forEach((dep) => {
    if (originalDependencies[dep]) {
      packageJsonContent.dependencies[dep] = originalDependencies[dep];
    } else {
      packageJsonContent.dependencies[dep] = 'latest'; // Fallback to latest if not found
    }
  });

  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJsonContent, null, 2));
  console.log(`package.json created at ${packageJsonPath}`);
}

// Usage: node create-package-json.js <path-to-original-package-json> <path-to-js-file>
if (process.argv.length !== 4) {
  console.error('Usage: node node_modules.js <path-to-original-package-json> <path-to-js-file>');
  process.exit(1);
}

const originalPackageJsonPath = process.argv[2];
const filePath = process.argv[3];

if (!fs.existsSync(originalPackageJsonPath)) {
  console.error(`Original package.json not found: ${originalPackageJsonPath}`);
  process.exit(1);
}

if (!fs.existsSync(filePath)) {
  console.error(`JavaScript file not found: ${filePath}`);
  process.exit(1);
}

const dependencies = extractDependencies(filePath);
createPackageJson([...dependencies, "@nestjs/platform-express","rxjs","reflect-metadata","dotenv","axios"], originalPackageJsonPath, filePath);
